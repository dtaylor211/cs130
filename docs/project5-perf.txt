CS130 Project 5 - Performance Improvement
=========================================

Improvement 1
-------------

Theory: Every major operation appears slower than expected, so there seems to be
a large underlying issue that we will try to identify in order to improve the
overall performance of our program. 

Rationale: After analyzing the profiler data associated with our performance 
tests, we seem to have located the issue such that our program spends a lot of 
time dealing with lark and loading the grammar.  More specifically, with a test
that simulates the LongChainUpdateBenchmark test, the cumulative time was almost
50 seconds which is too long.  We believe this is because each time we create a
cell, we load the lark grammar.  We can fix this by moving one line of code 
outside of the Cell __init__() in order to only load the grammar once. We also
changed the Lark parser to be a LALR parser, since this parser only has O(n)
complexity while the default Earley parser has O(n^3) complexity.  This required
a few changes to the grammar, so that every input had only one possible match.

Outcome: With these fixes, the cumulative time with the same performance test
drops to about 1 second.  This performance improvement seems to have been
applied across all major operations, as expected, after confirmation with other 
performance tests.  These fixes alone will cause us to reach most (if not all)
of the benchmarks for the peformance benchmark tests.  Yay we were right!

Improvement 2
-------------

Theory: We think copy sheet operation is too slow, so we will try to investigate
and improve it.

Rationale: We know that this operation is slow due to our own performance tests 
as well as the benchmark test results from project 4.  Specifically, our test in
test_copy_sheet_bulk.py (make target test-performance-copy-sheet-bulk) takes 
about 75-80 seconds which certainly indicates sub par performance.  Also, the 
benchmark test CopySheetBenchmark is 14.7x slower than the reference 
implementation. We also think that we are calling update_cell_values too often,
and should instead perform a topological sort on a list of all cells that are
updated in an operation. The main fixes for these problems come from the switch
to a LALR parser, which is described in Improvement 1's Rationale, as well as
the implementation of an iterative update_cell_values.

Outcome: With these fixes, the cumulative time with the same performance test
drops to about 2 seconds.  Similar to above, the performance improvement
seems to have been applied across all major operations. Yay! We did it!

Improvement 3
-------------

Theory: We think our rename sheet operation is too slow in certain cases, so we 
will try to investigate and improve it.

Rationale: We thought that our rename sheet operation was fast enough according
to our own performance tests, but the project 4 benchmark test results suggest 
otherwise.  While RenameSheetCellrefUpdateBenchmark is only 2.1x slower, our 
RenameSheetNoCellrefUpdateBenchmark is 17.7x slower.  This is interesting since
we would expect the benchmark with cell references to be slower.

Outcome: With the same fixes mentioned above, we were able to decrease the
cumulative run time for our renaming sheet performance tests for renaming that 
causes a chain, renaming that causes a large volume of cells to update, and 
renaming a sheet 10 times from 5.7, 1.4, and 30 seconds to 0.7, 0.1, and 1.8
seconds, respectively.  This is awesome yay! Our performance fixes are working
everywhere!

Improvement 4
-------------

Theory: We think our move cell operation is still too slow, so we will try to 
investigate and improve it.

Rationale: While our own perfomance tests seem to suggest that our move cell 
operation is decently fast, the project 4 benchmark test results suggest 
otherwise.  The MoveCellsSameSheetBenchmark is 7.8x slower and the 
MoveCellsDifferentSheetBenchmark is 8x slower.

Outcome: We tested to see if the same main fixes we have mentioned earlier would
also positively impact the performance of moving cells.  Cumulative time for
moving a large group of source cells decreased from 4.8 to 1 seconds. Cumulative
time for moving a group of cells 10 times decreased from 24.3 to 0.2 seconds.
Yay! It all worked as desired. Go us!

NOTES: 
New benchmarks: 
-*MoveCellsSameSheetBenchmark: 7.8x slower
-*MoveCellsDifferentSheetBenchmark: 8x slower
-*CopySheetBenchmark: 14.7x slower
-*RenameSheetNoCellrefUpdateBenchmark: 17.7x slower
-JsonLoadBenchmark: 1.2x slower
-CopyCellsSameSheetBenchmark: 1.7x slower
-CopyCellsDifferentSheetBenchmark: 1.7x slower
-RenameSheetCellrefUpdateBenchmark: 2.1x slower